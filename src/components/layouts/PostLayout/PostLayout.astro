---
import '@src/sass/globals.scss'
import type { CollectionEntry } from 'astro:content'
import PostHero from '@src/components/organisms/PostHero/PostHero.astro'
import Header from '@src/components/organisms/Header/Header.astro'
import Footer from '@src/components/organisms/Footer/Footer.astro'
import StickyBtn from '@src/components/organisms/StickyBtn/StickyBtn.astro'
import Aside from '@src/components/organisms/Aside/Aside.astro'
import Head from '@src/components/atoms/Head/Head.astro'
import Scripts from '@src/components/atoms/Scripts/Scripts.astro'

type Props = CollectionEntry<'blog'>['data']

const { title, description, date, image, author, category, keywords }: Props =
  Astro.props
---

<!doctype html>
<html lang='es'>
  <Head
    postTitle={title}
    postImage={image}
    postAuthor={author}
    postKeywords={keywords}
    postDescription={description}
  />
  <body>
    <StickyBtn />
    <Header fixed={true} />
    <div>
      <PostHero
        title={title}
        image={image}
        date={date}
        author={author}
        category={category}
      />
      <div class='divider-sm'></div>
      <div class='container-lg'>
        <div class='row'>
          <div class='col-12 col-md-8'>
            <div class='markdown'>
              <slot />
            </div>
          </div>
          <div class='col-12 col-md-4'>
            <Aside />
          </div>
        </div>
      </div>
    </div>
    <Footer />
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Seleccionamos todos los bloques code generados por Markdown
        const codeElements = document.querySelectorAll('pre code');
      
        codeElements.forEach(code => {
          const pre = code.parentNode; 
          // Verificamos que pre no sea nulo y que tenga un parentNode
          if (!pre || !pre.parentNode) {
            return; // Si no existe el padre, salimos
          }
      
          // Creamos el contenedor principal
          const wrapper = document.createElement('div');
          wrapper.classList.add('code-block');
      
          // Creamos el botón
          const button = document.createElement('button');
          button.classList.add('copy-btn', 'btn', 'btn-outline-primary', 'border-1', 'border-primary');
          // Aquí colocamos el ícono en lugar del texto
          button.innerHTML = '<i class="bi bi-copy"></i>';
      
          // Insertamos el wrapper antes del <pre>
          pre.parentNode.insertBefore(wrapper, pre);
      
          // Movemos el <pre> dentro del wrapper
          // Ahora, como pre es de tipo Node, no deberíamos tener problemas,
          // pero si TypeScript se queja, podemos comprobar su tipo:
          wrapper.appendChild(pre);
      
          // Asignamos el evento de click al botón
          button.addEventListener('click', async () => {
            // Convertimos code a HTMLElement para acceder a innerText
            const codeElement = code as HTMLElement; 
            const textToCopy = codeElement.innerText || codeElement.textContent || '';
            try {
              await navigator.clipboard.writeText(textToCopy.trim());
              // Cambiamos el ícono temporalmente para indicar que se copió
              button.innerHTML = '<i class="bi bi-check2"></i>';
              setTimeout(() => {
                // Volvemos al ícono original
                button.innerHTML = '<i class="bi bi-copy"></i>';
              }, 2000);
            } catch (err) {
              console.error('Error al copiar: ', err);
            }
          });
      
          wrapper.appendChild(button);
        });
      });
      </script>
      
      
    <Scripts />
  </body>
</html>
